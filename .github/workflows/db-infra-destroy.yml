# This is a basic workflow to help you get started with Actions

name: DBInfra Destroy

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGION_DEFAULT: us-east-1

jobs:
  tf-destroy:
    name: Terraform Analyze
    runs-on: ubuntu-latest
    env:
      BUCKET_EXISTS: false
      PLAN_OUTPUT: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v4
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.REGION_DEFAULT }}

      - name: Set up environment
        run: |
          echo "terraform {
            backend \"s3\" {
              bucket = \"fiap-backend-tf-db-${{ secrets.AWS_ACCOUNT_ID }}\"
              key    = \"backend/terraform.tfstate\"
              region = \"us-east-1\"
            }
          }" > override.tf

      - name: Check if S3 bucket exists
        id: check_bucket
        run: |
          BUCKET_NAME="fiap-backend-tf-db-${{ secrets.AWS_ACCOUNT_ID }}"
          if aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket exists."
            echo "BUCKET_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Bucket does not exist."
            echo "BUCKET_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create S3 bucket if it does not exist
        if: env.BUCKET_EXISTS == 'false'
        run: |
          aws s3api create-bucket --bucket fiap-backend-tf-db-${{ secrets.AWS_ACCOUNT_ID }}
          echo "Bucket created."

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Destroy database infraestructure using Terraform
        run: |
          terraform init
          terraform destroy -auto-approve -input=false -var "project_name=${{ env.EKS_CLUSTER_NAME }}" -var "password=${{ secrets.AWS_ACCOUNT_ID }}"
